<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>剑指offer</title>
    <link href="/2025/03/14/%E5%89%91%E6%8C%87offer/"/>
    <url>/2025/03/14/%E5%89%91%E6%8C%87offer/</url>
    
    <content type="html"><![CDATA[<p>剑指 offer 算法刷题记录（Golang 版）</p><span id="more"></span><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a><strong>从尾到头打印链表</strong></h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。</p><p>如输入{1,2,3}的链表如下图:</p><p><img src="https://uploadfiles.nowcoder.com/images/20210717/557336_1626506480516/103D87B58E565E87DEFA9DD0B822C55F" alt="img"></p><p>代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printListFromTailToHead</span><span class="hljs-params">(head *ListNode)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> stack []<span class="hljs-type">int</span><br>    <span class="hljs-keyword">var</span> res []<span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> head != <span class="hljs-literal">nil</span> &#123;<br>stack=<span class="hljs-built_in">append</span>(stack, head.Val)<br>        head = head.Next<br>&#125;<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack)&gt;<span class="hljs-number">0</span>&#123;<br>        res = <span class="hljs-built_in">append</span>(res, stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>])<br>        stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br><br></code></pre></td></tr></table></figure><p>思路解释：</p><p>从尾到头的顺序，很容易想到栈的结构，后进先出即可。具体步骤如下：</p><ol><li>初始化一个空的栈 <code>stack</code> 和结果数组 <code>res</code>。</li><li>遍历链表，将每个节点的值压入栈中。</li><li>遍历栈，将栈顶元素弹出并添加到结果数组中，直到栈为空。</li><li>返回结果数组 <code>res</code>。</li></ol><p>这种方法的时间复杂度为 O(n)，空间复杂度为 O(n)，其中 n 是链表的长度。</p><p>好的，下面是对你提供的链表反转问题的总结：</p><h2 id="链表反转"><a href="#链表反转" class="headerlink" title="链表反转"></a>链表反转</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个单链表的头节点，反转该链表，并返回反转后的链表的头节点。</p><p><strong>示例：</strong></p><ul><li>输入：<code>&#123;1, 2, 3&#125;</code></li><li>输出：<code>&#123;3, 2, 1&#125;</code></li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>链表反转的思路可以用一个非常经典的比喻来理解：<strong>想象你有一堆牌，你需要把它们的顺序颠倒过来。</strong></p><ol><li><p><strong>三个指针：</strong> 我们需要三个指针来完成这个任务：</p><ul><li><code>prev</code>：指向已经反转好的链表的头节点。初始时，它指向 <code>nil</code>，因为最开始还没有反转任何节点。</li><li><code>current</code>：指向当前正在处理的节点。</li><li><code>next</code>：指向 <code>current</code> 节点的下一个节点，用于在断开 <code>current</code> 节点的 <code>Next</code> 指针之前，保存后续节点的引用，防止链表断裂。</li></ul></li><li><p><strong>迭代反转：</strong> 遍历链表，对于每个 <code>current</code> 节点，执行以下操作：</p><ul><li><strong>保存 <code>next</code>：</strong> 首先，用 <code>next</code> 指针保存 <code>current.Next</code>，因为接下来要修改 <code>current.Next</code>。</li><li><strong>反转指针：</strong> 将 <code>current.Next</code> 指向 <code>prev</code>，实现反转。</li><li><strong>移动指针：</strong> 将 <code>prev</code> 移动到 <code>current</code>，<code>current</code> 移动到 <code>next</code>，为处理下一个节点做准备。</li></ul></li><li><p><strong>新的头节点：</strong> 当 <code>current</code> 指针到达链表末尾（<code>nil</code>）时，<code>prev</code> 指针指向的就是反转后链表的头节点。</p></li></ol><p><strong>图解：</strong></p><p>假设链表为 <code>1 -&gt; 2 -&gt; 3 -&gt; nil</code></p><ol><li>初始状态：</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">prev</span> <span class="hljs-operator">=</span> nil<br><span class="hljs-attribute">current</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">next</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ol start="2"><li>第一次迭代：</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">next</span> <span class="hljs-operator">=</span> current.Next  // next <span class="hljs-operator">=</span> <span class="hljs-number">2</span><br>current.Next <span class="hljs-operator">=</span> prev  // <span class="hljs-number">1</span> -&gt; nil<br><span class="hljs-attribute">prev</span> <span class="hljs-operator">=</span> current       // prev <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">current</span> <span class="hljs-operator">=</span> next       // current <span class="hljs-operator">=</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>链表变为：<code>1 &lt;- 2 -&gt; 3 -&gt; nil</code> (1 指向 nil)</p><ol start="3"><li>第二次迭代：</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">next</span> <span class="hljs-operator">=</span> current.Next  // next <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br>current.Next <span class="hljs-operator">=</span> prev  // <span class="hljs-number">2</span> -&gt; <span class="hljs-number">1</span><br><span class="hljs-attribute">prev</span> <span class="hljs-operator">=</span> current       // prev <span class="hljs-operator">=</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">current</span> <span class="hljs-operator">=</span> next       // current <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>链表变为：<code>1 &lt;- 2 &lt;- 3 -&gt; nil</code> (2 指向 1)</p><ol start="4"><li>第三次迭代：</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">next</span> <span class="hljs-operator">=</span> current.Next  // next <span class="hljs-operator">=</span> nil<br>current.Next <span class="hljs-operator">=</span> prev  // <span class="hljs-number">3</span> -&gt; <span class="hljs-number">2</span><br><span class="hljs-attribute">prev</span> <span class="hljs-operator">=</span> current       // prev <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">current</span> <span class="hljs-operator">=</span> next       // current <span class="hljs-operator">=</span> nil<br></code></pre></td></tr></table></figure><p>链表变为：<code>1 &lt;- 2 &lt;- 3</code> (3 指向 2)</p><ol start="5"><li>循环结束：<code>current</code> 为 <code>nil</code>，<code>prev</code> 指向新的头节点 <code>3</code>。</li></ol><h3 id="算法代码-Go"><a href="#算法代码-Go" class="headerlink" title="算法代码 (Go)"></a>算法代码 (Go)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> . <span class="hljs-string">&quot;nc_tools&quot;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * type ListNode struct&#123;</span><br><span class="hljs-comment"> *   Val int</span><br><span class="hljs-comment"> *   Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReverseList</span><span class="hljs-params">(head *ListNode)</span></span> *ListNode &#123;<br><span class="hljs-comment">// write code here</span><br><span class="hljs-keyword">var</span> prev *ListNode = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">var</span> current *ListNode = head<br><span class="hljs-keyword">for</span> current != <span class="hljs-literal">nil</span> &#123;<br>next := current.Next <span class="hljs-comment">// 保存下一个节点</span><br>current.Next = prev  <span class="hljs-comment">// 反转指针</span><br>prev = current       <span class="hljs-comment">// 移动 prev 指针</span><br>current = next       <span class="hljs-comment">// 移动 current 指针</span><br>&#125;<br><span class="hljs-keyword">return</span> prev <span class="hljs-comment">// prev 指向新的头节点</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>适用场景：</strong> 这种反转链表的方法适用于单链表结构。它是一种原地反转算法，只需要常数级别的额外空间（三个指针），因此空间复杂度为 O(1)。时间复杂度为 O(n)，因为需要遍历链表一次。</li><li><strong>算法类型：</strong> 链表操作</li><li><strong>技巧：</strong> 使用多个指针来辅助完成链表结构的修改是非常常见的技巧。一定要理清指针的指向关系，防止链表断裂。</li><li><strong>易错点：</strong> 在反转指针之前，一定要先保存下一个节点的引用，否则链表会断裂。</li><li><strong>变体：</strong> 链表反转有很多变体，例如反转链表的一部分（指定起始和结束位置）。基本思路都是类似的，需要仔细处理指针的指向。</li></ul><p>好的，下面是对你提供的题目和代码的总结：</p><h2 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a>合并两个排序的链表</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入两个递增的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。</p><p><strong>数据范围：</strong></p><ul><li>单个链表的长度 <code>n</code> 满足 <code>0 &lt;= n &lt;= 1000</code></li><li>节点值满足 <code>-1000 &lt;= 节点值 &lt;= 1000</code></li></ul><p><strong>要求：</strong></p><ul><li>空间复杂度 O(1)</li><li>时间复杂度 O(n)</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题的解题思路非常经典，就是<strong>迭代</strong>比较两个链表的当前节点，将较小的节点添加到新的链表中。  由于输入链表是递增的，所以我们只需要比较两个链表的头节点，将较小的节点作为新链表的头节点，然后递归地处理剩余的链表即可。</p><p>具体步骤如下：</p><ol><li><p><strong>初始化：</strong></p><ul><li>创建一个哑节点（dummy node），作为合并后链表的头节点。哑节点不存储实际数据，只是为了方便操作。</li><li>创建一个指针 <code>current</code>，指向哑节点，用于构建合并后的链表。</li></ul></li><li><p><strong>迭代比较：</strong></p><ul><li>循环比较 <code>pHead1</code> 和 <code>pHead2</code> 指向的节点的值，直到其中一个链表为空。</li><li>如果 <code>pHead1.Val &lt;= pHead2.Val</code>，则将 <code>pHead1</code> 指向的节点添加到 <code>current</code> 的 <code>Next</code> 指针，并将 <code>pHead1</code> 向后移动一位。</li><li>否则，将 <code>pHead2</code> 指向的节点添加到 <code>current</code> 的 <code>Next</code> 指针，并将 <code>pHead2</code> 向后移动一位。</li><li>将 <code>current</code> 指针向后移动一位。</li></ul></li><li><p><strong>处理剩余节点：</strong></p><ul><li>当其中一个链表为空时，将另一个链表剩余的节点直接添加到 <code>current</code> 的 <code>Next</code> 指针。</li></ul></li><li><p><strong>返回结果：</strong></p><ul><li>返回哑节点的 <code>Next</code> 指针，即合并后的链表的头节点。</li></ul></li></ol><p><strong>为什么使用哑节点？</strong></p><p>使用哑节点可以避免对头节点的特殊处理，使代码更加简洁。如果没有哑节点，我们需要判断合并后的链表的头节点是 <code>pHead1</code> 还是 <code>pHead2</code>，这会增加代码的复杂性。</p><h3 id="代码实现-Go"><a href="#代码实现-Go" class="headerlink" title="代码实现 (Go)"></a>代码实现 (Go)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> . <span class="hljs-string">&quot;nc_tools&quot;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * type ListNode struct&#123;</span><br><span class="hljs-comment"> *   Val int</span><br><span class="hljs-comment"> *   Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param pHead1 ListNode类</span><br><span class="hljs-comment"> * @param pHead2 ListNode类</span><br><span class="hljs-comment"> * @return ListNode类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Merge</span><span class="hljs-params">(pHead1 *ListNode, pHead2 *ListNode)</span></span> *ListNode &#123;<br>dummy := &amp;ListNode&#123;&#125; <span class="hljs-comment">// 创建哑节点</span><br>current := dummy     <span class="hljs-comment">// current 指针指向哑节点</span><br><br><span class="hljs-comment">// 循环比较两个链表的节点</span><br><span class="hljs-keyword">for</span> pHead1 != <span class="hljs-literal">nil</span> &amp;&amp; pHead2 != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> pHead1.Val &lt;= pHead2.Val &#123;<br>current.Next = pHead1 <span class="hljs-comment">// 将 pHead1 的节点添加到新链表</span><br>pHead1 = pHead1.Next    <span class="hljs-comment">// pHead1 向后移动</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>current.Next = pHead2 <span class="hljs-comment">// 将 pHead2 的节点添加到新链表</span><br>pHead2 = pHead2.Next    <span class="hljs-comment">// pHead2 向后移动</span><br>&#125;<br>current = current.Next <span class="hljs-comment">// current 向后移动</span><br>&#125;<br><br><span class="hljs-comment">// 处理剩余节点</span><br><span class="hljs-keyword">if</span> pHead1 != <span class="hljs-literal">nil</span> &#123;<br>current.Next = pHead1 <span class="hljs-comment">// 将 pHead1 剩余的节点添加到新链表</span><br>&#125;<br><span class="hljs-keyword">if</span> pHead2 != <span class="hljs-literal">nil</span> &#123;<br>current.Next = pHead2 <span class="hljs-comment">// 将 pHead2 剩余的节点添加到新链表</span><br>&#125;<br><br><span class="hljs-keyword">return</span> dummy.Next <span class="hljs-comment">// 返回新链表的头节点</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li><strong>时间复杂度：</strong> O(n)，其中 n 是两个链表的总长度。我们需要遍历两个链表的所有节点。</li><li><strong>空间复杂度：</strong> O(1)。我们只使用了常量级的额外空间，例如哑节点和 <code>current</code> 指针。</li></ul><h3 id="适用题目类型"><a href="#适用题目类型" class="headerlink" title="适用题目类型"></a>适用题目类型</h3><p>这种合并排序链表的思路，通常适用于以下类型的题目：</p><ul><li><strong>涉及到两个或多个有序数据结构的合并问题。</strong>  例如，合并 k 个排序链表。</li><li><strong>需要保持合并后的数据结构仍然有序的问题。</strong></li><li><strong>对空间复杂度有要求的题目。</strong>  由于该算法的空间复杂度为 O(1)，因此非常适合对空间复杂度有严格限制的题目。</li></ul><p><strong>举例：</strong></p><ul><li><strong>LeetCode 23. 合并 K 个排序链表</strong></li><li><strong>类似本题的变种，例如要求合并后链表为降序排列。</strong></li></ul><p>好的，我们来一起梳理一下这道寻找链表公共节点的题目。我会用易懂的方式解释思路，并提供带有详细注释的 Golang 代码。</p><h2 id="寻找链表的第一个公共节点"><a href="#寻找链表的第一个公共节点" class="headerlink" title="寻找链表的第一个公共节点"></a>寻找链表的第一个公共节点</h2><p><strong>题目描述：</strong></p><p>给定两个无环的单向链表，找到它们的第一个公共节点。如果不存在公共节点，则返回 <code>nil</code>。</p><p><strong>要求：</strong></p><ul><li>空间复杂度为 O(1)。</li><li>时间复杂度为 O(n)。</li></ul><h3 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h3><p>想象一下，你在两条不同的河流上划船。两条河流最终汇入同一条河流，那么汇入点就是它们的第一个公共点。</p><ol><li><strong>长度差：</strong> 首先，我们需要知道两条河流（链表）的长度差。如果一条河流比另一条长，我们需要让较长的河流先划一段时间，直到它们到达同一起跑线。</li><li><strong>同步前进：</strong> 然后，两条河流同时开始划船，每次都前进一步。当两条船在同一个位置时，我们就找到了它们的第一个公共点。</li><li><strong>没有公共点：</strong> 如果两条河流一直没有相遇，那么它们就没有公共点。</li></ol><p><strong>图解：</strong></p><p>假设我们有两个链表：</p><ul><li>链表 A: <code>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7</code></li><li>链表 B: <code>      a -&gt; b -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7</code></li></ul><p>它们的第一个公共节点是 <code>4</code>。</p><p>用 Mermaid 图表示如下：</p><pre><code class=" mermaid">graph LR    A1(1) --&gt; A2(2)    A2 --&gt; A3(3)    A3 --&gt; A4(4)    A4 --&gt; A5(5)    A5 --&gt; A6(6)    A6 --&gt; A7(7)    B1(a) --&gt; B2(b)    B2 --&gt; A4</code></pre><p><strong>步骤：</strong></p><ol><li>计算链表 A 的长度（lenA &#x3D; 7）。</li><li>计算链表 B 的长度（lenB &#x3D; 2 + 5 &#x3D; 7）。</li><li>计算长度差（diff &#x3D; lenA - lenB &#x3D; 0）。</li><li>因为长度相等，所以不需要移动任何链表的头指针。</li><li>同时遍历链表 A 和链表 B，直到找到相同的节点（即节点 4）。</li></ol><h3 id="Golang-代码实现"><a href="#Golang-代码实现" class="headerlink" title="Golang 代码实现"></a>Golang 代码实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> . <span class="hljs-string">&quot;nc_tools&quot;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * type ListNode struct&#123;</span><br><span class="hljs-comment"> *   Val int</span><br><span class="hljs-comment"> *   Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param pHead1 ListNode类</span><br><span class="hljs-comment"> * @param pHead2 ListNode类</span><br><span class="hljs-comment"> * @return ListNode类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FindFirstCommonNode</span><span class="hljs-params">(pHead1 *ListNode, pHead2 *ListNode)</span></span> *ListNode &#123;<br><span class="hljs-comment">// 1. 判空处理：如果任一链表为空，则没有公共节点</span><br><span class="hljs-keyword">if</span> pHead1 == <span class="hljs-literal">nil</span> || pHead2 == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 2. 获取两个链表的长度</span><br>len1 := GetLength(pHead1)<br>len2 := GetLength(pHead2)<br><br><span class="hljs-comment">// 3. 计算长度差，让较长的链表先走几步</span><br>diff := <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> len1 &gt; len2 &#123;<br>diff = len1 - len2<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; diff; i++ &#123;<br>pHead1 = pHead1.Next <span class="hljs-comment">// 移动 pHead1 到同一起跑线</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>diff = len2 - len1<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; diff; i++ &#123;<br>pHead2 = pHead2.Next <span class="hljs-comment">// 移动 pHead2 到同一起跑线</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 4. 同时遍历两个链表，查找相同节点</span><br><span class="hljs-keyword">for</span> pHead1 != <span class="hljs-literal">nil</span> &amp;&amp; pHead2 != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> pHead1 == pHead2 &#123; <span class="hljs-comment">// 直接比较指针，如果指针相同则找到公共节点</span><br><span class="hljs-keyword">return</span> pHead1<br>&#125;<br>pHead1 = pHead1.Next <span class="hljs-comment">// 同时移动 pHead1</span><br>pHead2 = pHead2.Next <span class="hljs-comment">// 同时移动 pHead2</span><br>&#125;<br><br><span class="hljs-comment">// 5. 如果没有找到公共节点，则返回 nil</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// GetLength 获取链表的长度</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetLength</span><span class="hljs-params">(head *ListNode)</span></span> <span class="hljs-type">int</span> &#123;<br>length := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> head != <span class="hljs-literal">nil</span> &#123;<br>length++        <span class="hljs-comment">// 累加长度</span><br>head = head.Next <span class="hljs-comment">// 移动到下一个节点</span><br>&#125;<br><span class="hljs-keyword">return</span> length<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><strong>判空处理：</strong>  如果任何一个链表为空，那么它们不可能有公共节点，直接返回 <code>nil</code>。</li><li><strong>获取链表长度：</strong>  <code>GetLength</code> 函数用于计算链表的长度。</li><li><strong>调整起始位置：</strong>  计算长度差，并让较长的链表先移动，直到两个链表在同一起跑线上。</li><li><strong>同步遍历：</strong>  同时遍历两个链表，比较节点是否相同。如果找到相同的节点，则返回该节点。</li><li><strong>没有公共节点：</strong>  如果遍历完整个链表都没有找到公共节点，则返回 <code>nil</code>。</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>这种方法特别适用于以下场景：</p><ul><li>寻找两个单链表的第一个公共节点。</li><li>要求时间复杂度为 O(n)，空间复杂度为 O(1)。</li><li>链表没有环。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>etcd</title>
    <link href="/2025/03/13/etcd/"/>
    <url>/2025/03/13/etcd/</url>
    
    <content type="html"><![CDATA[<h1 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h1><p>采用 raft 协议，详细查看：<a href="https://mfzzf.github.io/2025/03/13/Raft%E5%8D%8F%E8%AE%AE/">https://mfzzf.github.io/2025/03/13/Raft%E5%8D%8F%E8%AE%AE/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux中的Cgroup</title>
    <link href="/2025/03/13/Linux%E4%B8%AD%E7%9A%84Cgroup/"/>
    <url>/2025/03/13/Linux%E4%B8%AD%E7%9A%84Cgroup/</url>
    
    <content type="html"><![CDATA[<p><strong>cgroup（Control Groups）</strong> 是 Linux 内核中的一项重要功能，用于管理和限制系统资源的使用。它允许用户按照需求对 CPU、内存、I&#x2F;O 等资源进行精细化的控制，从而为容器化技术（如 Docker 和 Kubernetes）提供了基础支持。</p><span id="more"></span><p>Linux 的 cgroup 有两个版本：<strong>cgroup v1</strong> 和 <strong>cgroup v2</strong>。随着 Linux 内核的发展，cgroup v2 在功能和设计上对 v1 做了很多改进。本文将详细探讨 cgroup v1 和 v2 的区别，并提供技术细节和实际应用示例。</p><hr><h2 id="什么是-cgroup？"><a href="#什么是-cgroup？" class="headerlink" title="什么是 cgroup？"></a>什么是 cgroup？</h2><p>cgroup 是 Linux 内核的一项功能，用于：</p><ol><li><strong>资源限制</strong>：限制某些进程可以使用的资源量（如 CPU、内存等）。</li><li><strong>资源优先级</strong>：为不同的进程分配不同的资源优先级。</li><li><strong>资源计费</strong>：跟踪进程使用的资源量。</li><li><strong>进程管理</strong>：将一组进程组织为一个组，并对其统一管理。</li></ol><p>它的主要应用场景包括：</p><ul><li>容器技术（如 Docker、Kubernetes）。</li><li>虚拟化技术。</li><li>系统性能调优。</li></ul><hr><h2 id="cgroup-v1-和-v2-的区别"><a href="#cgroup-v1-和-v2-的区别" class="headerlink" title="cgroup v1 和 v2 的区别"></a>cgroup v1 和 v2 的区别</h2><h3 id="1-文件结构对比"><a href="#1-文件结构对比" class="headerlink" title="1.文件结构对比"></a>1.<strong>文件结构对比</strong></h3><h4 id="cgroup-v1-的文件结构"><a href="#cgroup-v1-的文件结构" class="headerlink" title="cgroup v1 的文件结构"></a>cgroup v1 的文件结构</h4><p>在 cgroup v1 中，每种资源（如 CPU、内存、I&#x2F;O）都有独立的子系统，每个子系统都有自己的目录和控制文件。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">/sys/fs/cgroup/<br>├── cpu/<br>│   ├── cpu.cfs_quota_us<br>│   ├── cpu.cfs_period_us<br>│   ├── tasks<br>│   └── ...<br>├── memory/<br>│   ├── memory.limit_in_bytes<br>│   ├── memory.usage_in_bytes<br>│   ├── tasks<br>│   └── ...<br>└── blkio/<br>    ├── blkio.throttle.read_bps_device<br>    ├── blkio.throttle.write_bps_device<br>    ├── tasks<br>    └── ...<br></code></pre></td></tr></table></figure><ul><li>每个子系统（如 <code>cpu</code>、<code>memory</code>）管理自己的资源。</li><li>配置文件分散在不同的目录中，容易导致配置冲突。</li></ul><h4 id="cgroup-v2-的文件结构"><a href="#cgroup-v2-的文件结构" class="headerlink" title="cgroup v2 的文件结构"></a>cgroup v2 的文件结构</h4><p>在 cgroup v2 中，所有控制器共享一个统一的层次结构和文件系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">/sys/fs/cgroup/<br>├── cgroup.controllers<br>├── cgroup.procs<br>├── cgroup.subtree_control<br>├── cpu.max<br>├── memory.max<br>├── io.max<br>└── ...<br></code></pre></td></tr></table></figure><ul><li>统一的文件结构，所有资源控制参数（如 CPU、内存、I&#x2F;O）都在同一目录下。</li><li>减少了配置冲突，更加简洁和高效。</li></ul><hr><h3 id="2-资源控制参数对比"><a href="#2-资源控制参数对比" class="headerlink" title="2. 资源控制参数对比"></a>2. <strong>资源控制参数对比</strong></h3><p>以下是 cgroup v1 和 v2 在资源控制方面的主要参数对比：</p><h4 id="CPU-控制参数"><a href="#CPU-控制参数" class="headerlink" title="CPU 控制参数"></a>CPU 控制参数</h4><table><thead><tr><th><strong>功能</strong></th><th><strong>cgroup v1 参数</strong></th><th><strong>cgroup v2 参数</strong></th></tr></thead><tbody><tr><td>设置 CPU 时间配额</td><td><code>cpu.cfs_quota_us</code></td><td><code>cpu.max</code></td></tr><tr><td>设置 CPU 时间周期</td><td><code>cpu.cfs_period_us</code></td><td><code>cpu.max</code></td></tr><tr><td>设置 CPU 权重（优先级）</td><td><code>cpu.shares</code></td><td><code>cpu.weight</code></td></tr></tbody></table><ul><li>在 cgroup v2 中，<code>cpu.max</code> 替代了 <code>cpu.cfs_quota_us</code> 和 <code>cpu.cfs_period_us</code>，格式为 <code>&lt;quota&gt; &lt;period&gt;</code>。</li><li><code>cpu.weight</code> 替代了 <code>cpu.shares</code>，用于设置 CPU 权重。</li></ul><h4 id="内存控制参数"><a href="#内存控制参数" class="headerlink" title="内存控制参数"></a>内存控制参数</h4><table><thead><tr><th><strong>功能</strong></th><th><strong>cgroup v1 参数</strong></th><th><strong>cgroup v2 参数</strong></th></tr></thead><tbody><tr><td>设置内存上限</td><td><code>memory.limit_in_bytes</code></td><td><code>memory.max</code></td></tr><tr><td>设置内存软限制</td><td><code>memory.soft_limit_in_bytes</code></td><td>不支持</td></tr><tr><td>内存使用量</td><td><code>memory.usage_in_bytes</code></td><td><code>memory.current</code></td></tr></tbody></table><ul><li>cgroup v2 简化了内存控制，废弃了一些复杂的参数（如软限制）。</li></ul><h4 id="I-O-控制参数"><a href="#I-O-控制参数" class="headerlink" title="I&#x2F;O 控制参数"></a>I&#x2F;O 控制参数</h4><table><thead><tr><th><strong>功能</strong></th><th><strong>cgroup v1 参数</strong></th><th><strong>cgroup v2 参数</strong></th></tr></thead><tbody><tr><td>限制读写带宽</td><td><code>blkio.throttle.read_bps_device</code></td><td><code>io.max</code></td></tr><tr><td>限制 IOPS</td><td><code>blkio.throttle.write_iops_device</code></td><td><code>io.max</code></td></tr></tbody></table><ul><li>cgroup v2 使用 <code>io.max</code> 统一配置 I&#x2F;O 带宽和 IOPS 限制。</li></ul><hr><h2 id="控制-CPU-使用率示例："><a href="#控制-CPU-使用率示例：" class="headerlink" title="控制 CPU 使用率示例："></a>控制 CPU 使用率示例：</h2><p>运行以下 Go 程序，会吃掉两个 CPU：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>                <span class="hljs-keyword">for</span> &#123;<br>                &#125;<br>        &#125;()<br>        <span class="hljs-keyword">for</span> &#123;<br><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">go build -o busyloop</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./busyloop<br></code></pre></td></tr></table></figure><p>此时运行<code>top</code>命令，会显示 200%CPU 占用。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache">   <span class="hljs-attribute">PID</span> USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                <br><span class="hljs-attribute">426388</span> cadmin    <span class="hljs-number">20</span>   <span class="hljs-number">0</span>  <span class="hljs-number">702356</span>   <span class="hljs-number">1024</span>    <span class="hljs-number">640</span> R <span class="hljs-number">210</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>:<span class="hljs-number">18</span>.<span class="hljs-number">75</span> busyloop  <br></code></pre></td></tr></table></figure><p>他的 PID 号是<code>426388</code>，我们可以<code>mkdir /sys/fs/cgroup/cpudemo</code>，然后将它添加到<code>cpu.procs</code>中。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">echo</span> <span class="hljs-keyword">ps</span> -ef|<span class="hljs-keyword">grep</span> busyloop|<span class="hljs-keyword">grep</span> -v <span class="hljs-keyword">grep</span>|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> &gt; cgroup.procs<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;100000 1000000&quot;</span> &gt; cpu.<span class="hljs-built_in">max</span><br></code></pre></td></tr></table></figure><p>此时限制 100000&#x2F;1000000 就是使用 10% 的 CPU 了。</p><hr><h2 id="如何检查系统使用的是-cgroup-v1-还是-v2？"><a href="#如何检查系统使用的是-cgroup-v1-还是-v2？" class="headerlink" title="如何检查系统使用的是 cgroup v1 还是 v2？"></a>如何检查系统使用的是 cgroup v1 还是 v2？</h2><p>运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount | grep cgroup<br></code></pre></td></tr></table></figure><ul><li>如果输出中包含 <code>cgroup2</code>，说明系统使用的是 cgroup v2。</li><li>如果输出中包含多个子系统（如 <code>cpu</code>、<code>memory</code> 等），说明使用的是 cgroup v1。</li></ul><hr><h2 id="可视化对比"><a href="#可视化对比" class="headerlink" title="可视化对比"></a>可视化对比</h2><p>以下是 cgroup v1 和 v2 的结构对比：</p><pre><code class=" mermaid">graph TD    A[cgroup v1] --&gt; B[cpu]    A --&gt; C[memory]    A --&gt; D[blkio]    B --&gt; E[cpu.cfs_quota_us]    B --&gt; F[cpu.cfs_period_us]    C --&gt; G[memory.limit_in_bytes]    D --&gt; H[blkio.throttle.read_bps_device]    I[cgroup v2] --&gt; J[cpu.max]    I --&gt; K[memory.max]    I --&gt; L[io.max]</code></pre><hr>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raft协议</title>
    <link href="/2025/03/13/Raft%E5%8D%8F%E8%AE%AE/"/>
    <url>/2025/03/13/Raft%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>Raft 协议是一种分布式一致性协议，主要用于实现多个节点之间的一致性，为系统提供强一致性保证。本文描述了 Raft 的四种角色、选举机制、日志复制机制以及 <code>Learner</code> 角色的用途和场景。</p><span id="more"></span><hr><h3 id="Raft-协议的角色"><a href="#Raft-协议的角色" class="headerlink" title="Raft 协议的角色"></a><strong>Raft 协议的角色</strong></h3><p>在 Raft 协议中，一个节点可以处于以下四个角色之一：</p><ol><li><p><strong>Follower</strong>（跟随者）</p><ul><li>默认状态，每个节点在初始阶段或者重新加入集群时都会处于该状态。</li><li>被动接收来自 Leader 的心跳包（heartbeat）或日志更新请求。</li><li>如果一段时间（<code>Election Timeout</code>）内没有接收到 Leader 的心跳包，会转变为 Candidate。</li></ul></li><li><p><strong>Candidate</strong>（候选者）</p><ul><li>当一个 Follower 超过 <code>Election Timeout</code> 没有接收到心跳包时，会变为 Candidate 并发起选举。</li><li>向其他节点广播请求投票（<code>RequestVote</code>）。</li><li>如果获得超过半数的节点投票，即成为 Leader。</li><li>如果选举超时且没有节点获胜，会重新开始下一轮选举。</li></ul></li><li><p><strong>Leader</strong>（领导者）</p><ul><li>集群中的核心角色，处理客户端请求，管理日志复制并维持系统一致性。</li><li>定期向 Follower 发送心跳包，表明自己是当前的 Leader。</li><li>负责接收并提交客户端的写操作（通过日志复制机制实现）。</li></ul></li><li><p><strong>Learner</strong>（学习者）</p><ul><li>一个特殊角色，负责接收日志更新但不参与选举或投票。</li><li>通常用于读取副本（read-only replica），主要目的是增加系统的容错性和可扩展性。</li><li>在一些场景下，Learner 扮演只读节点的角色，例如为了避免对选举过程产生影响，同时满足读扩展需求。</li></ul></li></ol><hr><h3 id="Raft-的-Leader-选举"><a href="#Raft-的-Leader-选举" class="headerlink" title="Raft 的 Leader 选举"></a><strong>Raft 的 Leader 选举</strong></h3><p>起初，所有节点的状态都是 Follower。每个 Follower 都会设置一个随机的 <code>Election Timeout</code>，当这个时间段内没有收到 Leader 的心跳包时，将会发起选举。选举机制如下：</p><ol><li><p><strong>依次选举：</strong></p><ul><li>某个节点首先触发选举状态，变为 Candidate。</li><li>Candidate 向其他节点广播请求投票的消息（<code>RequestVote</code>）。</li><li>其他节点根据候选者的任期（term）和日志完整性决定是否投票给该候选者。</li><li>如果 Candidate 获得集群中过半数节点的选票，则当选 Leader，并开始发送心跳包。</li></ul></li><li><p><strong>冲突处理：</strong></p><ul><li>如果两个或多个节点同时发起选举，且得票数相同，最终导致没有节点获得多数投票，则会进入下一轮选举。</li><li>在进入下一轮选举时，每个节点会重新设置一个随机的 <code>Election Timeout</code>，从而减少下一次选举冲突的概率。</li></ul></li><li><p><strong>Leader 的权威性：</strong><br>当 Leader 当选后，会定期发送心跳包（<code>AppendEntries</code> RPC）。如果其他节点接收到心跳包，则会重置自己的 Election Timeout，确保不会触发新一轮选举。</p></li></ol><hr><h3 id="Raft-的日志复制机制"><a href="#Raft-的日志复制机制" class="headerlink" title="Raft 的日志复制机制"></a><strong>Raft 的日志复制机制</strong></h3><p>当集群中选出了 Leader 后，Leader 开始接收客户端的请求，并通过日志复制机制（Log Replication）确保所有节点状态一致。</p><h4 id="弱一致性："><a href="#弱一致性：" class="headerlink" title="弱一致性："></a><strong>弱一致性：</strong></h4><ol><li>客户端发送请求到 Leader。</li><li>Leader 将操作记录为日志条目，并将其同步到所有 Follower 节点的日志中。</li><li>一旦操作被写入 Leader 的日志，Leader 会直接向客户端返回确认。</li><li>Leader 后续再通知 Follower 提交（Commit）该日志操作。<ul><li>弱一致性具有较低的延迟，但无法保证所有节点都立即同步完成。</li></ul></li></ol><h4 id="强一致性："><a href="#强一致性：" class="headerlink" title="强一致性："></a><strong>强一致性：</strong></h4><ol><li>客户端发送请求到 Leader。</li><li>Leader 将操作记录到自身的日志，然后将该日志条目复制到 Follower 节点。</li><li>Follower 收到日志条目后，会向 Leader 发送确认（ack）信息。</li><li>当 Leader 收到大多数（过半数）节点的确认后，Leader 可以提交（commit）该日志操作，并将结果返回客户端。<ul><li>通过等待大多数节点的确认，确保一致性（即强一致性）。</li></ul></li></ol><p>总结：为了在不同场景下平衡性能和一致性要求，弱一致性和强一致性可以根据系统需求进行选择。</p><hr><h3 id="为什么需要-Learner？有什么应用场景？"><a href="#为什么需要-Learner？有什么应用场景？" class="headerlink" title="为什么需要 Learner？有什么应用场景？"></a><strong>为什么需要 Learner？有什么应用场景？</strong></h3><h4 id="1-什么是-Learner？"><a href="#1-什么是-Learner？" class="headerlink" title="1. 什么是 Learner？"></a><strong>1. 什么是 Learner？</strong></h4><p>Learner 是 Raft 协议中一个特殊的角色：</p><ul><li>Learner 节点被设计为一个只读节点（Read-Only）。</li><li>Learner 不参与选举过程，也不会被要求投票。</li><li>Learner 只接收 Leader 发送的日志复制数据，只用作数据同步，用于扩展系统的读性能或提升容错性。</li></ul><h4 id="2-Learner-的应用场景："><a href="#2-Learner-的应用场景：" class="headerlink" title="2. Learner 的应用场景："></a><strong>2. Learner 的应用场景：</strong></h4><ul><li><p><strong>非核心节点：</strong><br>在一个分布式系统中，为了扩展读取性能，我们可能希望新增更多副本节点。但这些节点不一定需要参与选举和投票。采用 Learner 角色可以减轻选举过程的压力，并不会直接影响一致性协议的核心流程。</p></li><li><p><strong>数据同步：</strong><br>在分布式存储系统中，某些节点因为距离（比如跨地域部署）或硬件性能问题无法及时响应，但仍需要同步集群的最新日志状态。Learner 可以被用作这样的从属节点。</p></li><li><p><strong>新节点加入：</strong><br>通过 Learner 角色将新节点加入到集群中，可以避免直接参与选举和投票所带来的干扰，并且在数据同步完成后，节点可以变为 Follower 正式加入集群。</p></li><li><p><strong>备份和容灾：</strong><br>Learner 节点可以被用于构建灾备集群。其日志内容与主集群一致，在灾难发生时可以切换为 Leader，以实现数据恢复和服务接管。</p></li><li><p><strong>读扩展：</strong><br>通过增加 Learner 节点，可以显著提升系统的读性能，因为这些节点专用于处理只读请求而不会承担写操作（日志复制除外）。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
