<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux中的Cgroup</title>
    <link href="/2025/03/13/Linux%E4%B8%AD%E7%9A%84Cgroup/"/>
    <url>/2025/03/13/Linux%E4%B8%AD%E7%9A%84Cgroup/</url>
    
    <content type="html"><![CDATA[<p><strong>cgroup（Control Groups）</strong> 是 Linux 内核中的一项重要功能，用于管理和限制系统资源的使用。它允许用户按照需求对 CPU、内存、I&#x2F;O 等资源进行精细化的控制，从而为容器化技术（如 Docker 和 Kubernetes）提供了基础支持。</p><span id="more"></span><p>Linux 的 cgroup 有两个版本：<strong>cgroup v1</strong> 和 <strong>cgroup v2</strong>。随着 Linux 内核的发展，cgroup v2 在功能和设计上对 v1 做了很多改进。本文将详细探讨 cgroup v1 和 v2 的区别，并提供技术细节和实际应用示例。</p><hr><h2 id="什么是-cgroup？"><a href="#什么是-cgroup？" class="headerlink" title="什么是 cgroup？"></a>什么是 cgroup？</h2><p>cgroup 是 Linux 内核的一项功能，用于：</p><ol><li><strong>资源限制</strong>：限制某些进程可以使用的资源量（如 CPU、内存等）。</li><li><strong>资源优先级</strong>：为不同的进程分配不同的资源优先级。</li><li><strong>资源计费</strong>：跟踪进程使用的资源量。</li><li><strong>进程管理</strong>：将一组进程组织为一个组，并对其统一管理。</li></ol><p>它的主要应用场景包括：</p><ul><li>容器技术（如 Docker、Kubernetes）。</li><li>虚拟化技术。</li><li>系统性能调优。</li></ul><hr><h2 id="cgroup-v1-和-v2-的区别"><a href="#cgroup-v1-和-v2-的区别" class="headerlink" title="cgroup v1 和 v2 的区别"></a>cgroup v1 和 v2 的区别</h2><h3 id="1-文件结构对比"><a href="#1-文件结构对比" class="headerlink" title="1.文件结构对比"></a>1.<strong>文件结构对比</strong></h3><h4 id="cgroup-v1-的文件结构"><a href="#cgroup-v1-的文件结构" class="headerlink" title="cgroup v1 的文件结构"></a>cgroup v1 的文件结构</h4><p>在 cgroup v1 中，每种资源（如 CPU、内存、I&#x2F;O）都有独立的子系统，每个子系统都有自己的目录和控制文件。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">/sys/fs/cgroup/<br>├── cpu/<br>│   ├── cpu.cfs_quota_us<br>│   ├── cpu.cfs_period_us<br>│   ├── tasks<br>│   └── ...<br>├── memory/<br>│   ├── memory.limit_in_bytes<br>│   ├── memory.usage_in_bytes<br>│   ├── tasks<br>│   └── ...<br>└── blkio/<br>    ├── blkio.throttle.read_bps_device<br>    ├── blkio.throttle.write_bps_device<br>    ├── tasks<br>    └── ...<br></code></pre></td></tr></table></figure><ul><li>每个子系统（如 <code>cpu</code>、<code>memory</code>）管理自己的资源。</li><li>配置文件分散在不同的目录中，容易导致配置冲突。</li></ul><h4 id="cgroup-v2-的文件结构"><a href="#cgroup-v2-的文件结构" class="headerlink" title="cgroup v2 的文件结构"></a>cgroup v2 的文件结构</h4><p>在 cgroup v2 中，所有控制器共享一个统一的层次结构和文件系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">/sys/fs/cgroup/<br>├── cgroup.controllers<br>├── cgroup.procs<br>├── cgroup.subtree_control<br>├── cpu.max<br>├── memory.max<br>├── io.max<br>└── ...<br></code></pre></td></tr></table></figure><ul><li>统一的文件结构，所有资源控制参数（如 CPU、内存、I&#x2F;O）都在同一目录下。</li><li>减少了配置冲突，更加简洁和高效。</li></ul><hr><h3 id="2-资源控制参数对比"><a href="#2-资源控制参数对比" class="headerlink" title="2. 资源控制参数对比"></a>2. <strong>资源控制参数对比</strong></h3><p>以下是 cgroup v1 和 v2 在资源控制方面的主要参数对比：</p><h4 id="CPU-控制参数"><a href="#CPU-控制参数" class="headerlink" title="CPU 控制参数"></a>CPU 控制参数</h4><table><thead><tr><th><strong>功能</strong></th><th><strong>cgroup v1 参数</strong></th><th><strong>cgroup v2 参数</strong></th></tr></thead><tbody><tr><td>设置 CPU 时间配额</td><td><code>cpu.cfs_quota_us</code></td><td><code>cpu.max</code></td></tr><tr><td>设置 CPU 时间周期</td><td><code>cpu.cfs_period_us</code></td><td><code>cpu.max</code></td></tr><tr><td>设置 CPU 权重（优先级）</td><td><code>cpu.shares</code></td><td><code>cpu.weight</code></td></tr></tbody></table><ul><li>在 cgroup v2 中，<code>cpu.max</code> 替代了 <code>cpu.cfs_quota_us</code> 和 <code>cpu.cfs_period_us</code>，格式为 <code>&lt;quota&gt; &lt;period&gt;</code>。</li><li><code>cpu.weight</code> 替代了 <code>cpu.shares</code>，用于设置 CPU 权重。</li></ul><h4 id="内存控制参数"><a href="#内存控制参数" class="headerlink" title="内存控制参数"></a>内存控制参数</h4><table><thead><tr><th><strong>功能</strong></th><th><strong>cgroup v1 参数</strong></th><th><strong>cgroup v2 参数</strong></th></tr></thead><tbody><tr><td>设置内存上限</td><td><code>memory.limit_in_bytes</code></td><td><code>memory.max</code></td></tr><tr><td>设置内存软限制</td><td><code>memory.soft_limit_in_bytes</code></td><td>不支持</td></tr><tr><td>内存使用量</td><td><code>memory.usage_in_bytes</code></td><td><code>memory.current</code></td></tr></tbody></table><ul><li>cgroup v2 简化了内存控制，废弃了一些复杂的参数（如软限制）。</li></ul><h4 id="I-O-控制参数"><a href="#I-O-控制参数" class="headerlink" title="I&#x2F;O 控制参数"></a>I&#x2F;O 控制参数</h4><table><thead><tr><th><strong>功能</strong></th><th><strong>cgroup v1 参数</strong></th><th><strong>cgroup v2 参数</strong></th></tr></thead><tbody><tr><td>限制读写带宽</td><td><code>blkio.throttle.read_bps_device</code></td><td><code>io.max</code></td></tr><tr><td>限制 IOPS</td><td><code>blkio.throttle.write_iops_device</code></td><td><code>io.max</code></td></tr></tbody></table><ul><li>cgroup v2 使用 <code>io.max</code> 统一配置 I&#x2F;O 带宽和 IOPS 限制。</li></ul><hr><h2 id="控制-CPU-使用率示例："><a href="#控制-CPU-使用率示例：" class="headerlink" title="控制 CPU 使用率示例："></a>控制 CPU 使用率示例：</h2><p>运行以下 Go 程序，会吃掉两个 CPU：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>                <span class="hljs-keyword">for</span> &#123;<br>                &#125;<br>        &#125;()<br>        <span class="hljs-keyword">for</span> &#123;<br><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">go build -o busyloop</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./busyloop<br></code></pre></td></tr></table></figure><p>此时运行<code>top</code>命令，会显示 200%CPU 占用。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache">   <span class="hljs-attribute">PID</span> USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                <br><span class="hljs-attribute">426388</span> cadmin    <span class="hljs-number">20</span>   <span class="hljs-number">0</span>  <span class="hljs-number">702356</span>   <span class="hljs-number">1024</span>    <span class="hljs-number">640</span> R <span class="hljs-number">210</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>.<span class="hljs-number">0</span>   <span class="hljs-number">0</span>:<span class="hljs-number">18</span>.<span class="hljs-number">75</span> busyloop  <br></code></pre></td></tr></table></figure><p>他的 PID 号是<code>426388</code>，我们可以<code>mkdir /sys/fs/cgroup/cpudemo</code>，然后将它添加到<code>cpu.procs</code>中。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">echo</span> <span class="hljs-keyword">ps</span> -ef|<span class="hljs-keyword">grep</span> busyloop|<span class="hljs-keyword">grep</span> -v <span class="hljs-keyword">grep</span>|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> &gt; cgroup.procs<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;100000 1000000&quot;</span> &gt; cpu.<span class="hljs-built_in">max</span><br></code></pre></td></tr></table></figure><p>此时限制 100000&#x2F;1000000 就是使用 10% 的 CPU 了。</p><hr><h2 id="如何检查系统使用的是-cgroup-v1-还是-v2？"><a href="#如何检查系统使用的是-cgroup-v1-还是-v2？" class="headerlink" title="如何检查系统使用的是 cgroup v1 还是 v2？"></a>如何检查系统使用的是 cgroup v1 还是 v2？</h2><p>运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount | grep cgroup<br></code></pre></td></tr></table></figure><ul><li>如果输出中包含 <code>cgroup2</code>，说明系统使用的是 cgroup v2。</li><li>如果输出中包含多个子系统（如 <code>cpu</code>、<code>memory</code> 等），说明使用的是 cgroup v1。</li></ul><hr><h2 id="可视化对比"><a href="#可视化对比" class="headerlink" title="可视化对比"></a>可视化对比</h2><p>以下是 cgroup v1 和 v2 的结构对比：</p><pre><code class=" mermaid">graph TD    A[cgroup v1] --&gt; B[cpu]    A --&gt; C[memory]    A --&gt; D[blkio]    B --&gt; E[cpu.cfs_quota_us]    B --&gt; F[cpu.cfs_period_us]    C --&gt; G[memory.limit_in_bytes]    D --&gt; H[blkio.throttle.read_bps_device]    I[cgroup v2] --&gt; J[cpu.max]    I --&gt; K[memory.max]    I --&gt; L[io.max]</code></pre><hr>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raft协议</title>
    <link href="/2025/03/13/Raft%E5%8D%8F%E8%AE%AE/"/>
    <url>/2025/03/13/Raft%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>Raft 协议是一种分布式一致性协议，主要用于实现多个节点之间的一致性，为系统提供强一致性保证。本文描述了 Raft 的四种角色、选举机制、日志复制机制以及 <code>Learner</code> 角色的用途和场景。</p><span id="more"></span><hr><h3 id="Raft-协议的角色"><a href="#Raft-协议的角色" class="headerlink" title="Raft 协议的角色"></a><strong>Raft 协议的角色</strong></h3><p>在 Raft 协议中，一个节点可以处于以下四个角色之一：</p><ol><li><p><strong>Follower</strong>（跟随者）</p><ul><li>默认状态，每个节点在初始阶段或者重新加入集群时都会处于该状态。</li><li>被动接收来自 Leader 的心跳包（heartbeat）或日志更新请求。</li><li>如果一段时间（<code>Election Timeout</code>）内没有接收到 Leader 的心跳包，会转变为 Candidate。</li></ul></li><li><p><strong>Candidate</strong>（候选者）</p><ul><li>当一个 Follower 超过 <code>Election Timeout</code> 没有接收到心跳包时，会变为 Candidate 并发起选举。</li><li>向其他节点广播请求投票（<code>RequestVote</code>）。</li><li>如果获得超过半数的节点投票，即成为 Leader。</li><li>如果选举超时且没有节点获胜，会重新开始下一轮选举。</li></ul></li><li><p><strong>Leader</strong>（领导者）</p><ul><li>集群中的核心角色，处理客户端请求，管理日志复制并维持系统一致性。</li><li>定期向 Follower 发送心跳包，表明自己是当前的 Leader。</li><li>负责接收并提交客户端的写操作（通过日志复制机制实现）。</li></ul></li><li><p><strong>Learner</strong>（学习者）</p><ul><li>一个特殊角色，负责接收日志更新但不参与选举或投票。</li><li>通常用于读取副本（read-only replica），主要目的是增加系统的容错性和可扩展性。</li><li>在一些场景下，Learner 扮演只读节点的角色，例如为了避免对选举过程产生影响，同时满足读扩展需求。</li></ul></li></ol><hr><h3 id="Raft-的-Leader-选举"><a href="#Raft-的-Leader-选举" class="headerlink" title="Raft 的 Leader 选举"></a><strong>Raft 的 Leader 选举</strong></h3><p>起初，所有节点的状态都是 Follower。每个 Follower 都会设置一个随机的 <code>Election Timeout</code>，当这个时间段内没有收到 Leader 的心跳包时，将会发起选举。选举机制如下：</p><ol><li><p><strong>依次选举：</strong></p><ul><li>某个节点首先触发选举状态，变为 Candidate。</li><li>Candidate 向其他节点广播请求投票的消息（<code>RequestVote</code>）。</li><li>其他节点根据候选者的任期（term）和日志完整性决定是否投票给该候选者。</li><li>如果 Candidate 获得集群中过半数节点的选票，则当选 Leader，并开始发送心跳包。</li></ul></li><li><p><strong>冲突处理：</strong></p><ul><li>如果两个或多个节点同时发起选举，且得票数相同，最终导致没有节点获得多数投票，则会进入下一轮选举。</li><li>在进入下一轮选举时，每个节点会重新设置一个随机的 <code>Election Timeout</code>，从而减少下一次选举冲突的概率。</li></ul></li><li><p><strong>Leader 的权威性：</strong><br>当 Leader 当选后，会定期发送心跳包（<code>AppendEntries</code> RPC）。如果其他节点接收到心跳包，则会重置自己的 Election Timeout，确保不会触发新一轮选举。</p></li></ol><hr><h3 id="Raft-的日志复制机制"><a href="#Raft-的日志复制机制" class="headerlink" title="Raft 的日志复制机制"></a><strong>Raft 的日志复制机制</strong></h3><p>当集群中选出了 Leader 后，Leader 开始接收客户端的请求，并通过日志复制机制（Log Replication）确保所有节点状态一致。</p><h4 id="弱一致性："><a href="#弱一致性：" class="headerlink" title="弱一致性："></a><strong>弱一致性：</strong></h4><ol><li>客户端发送请求到 Leader。</li><li>Leader 将操作记录为日志条目，并将其同步到所有 Follower 节点的日志中。</li><li>一旦操作被写入 Leader 的日志，Leader 会直接向客户端返回确认。</li><li>Leader 后续再通知 Follower 提交（Commit）该日志操作。<ul><li>弱一致性具有较低的延迟，但无法保证所有节点都立即同步完成。</li></ul></li></ol><h4 id="强一致性："><a href="#强一致性：" class="headerlink" title="强一致性："></a><strong>强一致性：</strong></h4><ol><li>客户端发送请求到 Leader。</li><li>Leader 将操作记录到自身的日志，然后将该日志条目复制到 Follower 节点。</li><li>Follower 收到日志条目后，会向 Leader 发送确认（ack）信息。</li><li>当 Leader 收到大多数（过半数）节点的确认后，Leader 可以提交（commit）该日志操作，并将结果返回客户端。<ul><li>通过等待大多数节点的确认，确保一致性（即强一致性）。</li></ul></li></ol><p>总结：为了在不同场景下平衡性能和一致性要求，弱一致性和强一致性可以根据系统需求进行选择。</p><hr><h3 id="为什么需要-Learner？有什么应用场景？"><a href="#为什么需要-Learner？有什么应用场景？" class="headerlink" title="为什么需要 Learner？有什么应用场景？"></a><strong>为什么需要 Learner？有什么应用场景？</strong></h3><h4 id="1-什么是-Learner？"><a href="#1-什么是-Learner？" class="headerlink" title="1. 什么是 Learner？"></a><strong>1. 什么是 Learner？</strong></h4><p>Learner 是 Raft 协议中一个特殊的角色：</p><ul><li>Learner 节点被设计为一个只读节点（Read-Only）。</li><li>Learner 不参与选举过程，也不会被要求投票。</li><li>Learner 只接收 Leader 发送的日志复制数据，只用作数据同步，用于扩展系统的读性能或提升容错性。</li></ul><h4 id="2-Learner-的应用场景："><a href="#2-Learner-的应用场景：" class="headerlink" title="2. Learner 的应用场景："></a><strong>2. Learner 的应用场景：</strong></h4><ul><li><p><strong>非核心节点：</strong><br>在一个分布式系统中，为了扩展读取性能，我们可能希望新增更多副本节点。但这些节点不一定需要参与选举和投票。采用 Learner 角色可以减轻选举过程的压力，并不会直接影响一致性协议的核心流程。</p></li><li><p><strong>数据同步：</strong><br>在分布式存储系统中，某些节点因为距离（比如跨地域部署）或硬件性能问题无法及时响应，但仍需要同步集群的最新日志状态。Learner 可以被用作这样的从属节点。</p></li><li><p><strong>新节点加入：</strong><br>通过 Learner 角色将新节点加入到集群中，可以避免直接参与选举和投票所带来的干扰，并且在数据同步完成后，节点可以变为 Follower 正式加入集群。</p></li><li><p><strong>备份和容灾：</strong><br>Learner 节点可以被用于构建灾备集群。其日志内容与主集群一致，在灾难发生时可以切换为 Leader，以实现数据恢复和服务接管。</p></li><li><p><strong>读扩展：</strong><br>通过增加 Learner 节点，可以显著提升系统的读性能，因为这些节点专用于处理只读请求而不会承担写操作（日志复制除外）。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
